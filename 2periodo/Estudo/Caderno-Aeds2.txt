AEDS 2  

-------------------------------------------------------------------------------------------
Pior caso da Pesquisa Sequencial é Theta(H) de (n).

Pesquisa binária alcança Theta(H) de (lg(n)) comparações.

Quick, Heap e Merge Sorts alcançam o Theta(H) de (n x lg(n)) limite inferior de ordenação. 

Algoritmos de ordenação tais como Bubble, Selection e Insertion fazem Theta(H) de (n²) comparações. 

-------------------------------------------------------------------------------------------

InsertionSort (Estável)

->Temos duas sequências (a ordenada e a ordenar) e, em cada passo, 
aumentamos a ordenada com um elemento que deve ser inserido em sua posição correta (ordenada);
->Se o elemento a ser ordenado for maior que o último da parte ordenada, então ele já está ordenado,
SE NÃO, deslocamos os elementos da parte ordenada e inserimos o elemento a ser ordenado na parte correta;

ANÁLISE DE COMPLEXIDADE
comparações: Melhor: [Θ(n)]  /  Pior: [Θ(n²)]
movimentações:C(n)+1 = Melhor: [Θ(n)]  /  Pior: [Θ(n²)]

Conclusão: Melhor caso (mov & comp) = array ordenado
->Pior caso (mov & comp) =array decrescente
->Método a ser utilizado quando o array estiver “quase” ordenado
    *Boa opção se desejarmos adicionar alguns itens em um array ordenado
porque seu custo será linear

//===CÓDIGO===//

for (int i = 1; i < n; i++) {
    int tmp = array[i];
    int j = i - 1;
    while ( (j >= 0) && (array[j] > tmp) ){
        array[j + 1] = array[j];
        j--;
    }
    array[j + 1] = tmp;
}

-------------------------------------------------------------------------------------------

ShellSort (não Estável)

->Faz múltiplas inserções;
->Problema da Inserção: menor elemento à direita, precisa-se fazer n-1 comparações e movimentações;
->O método de Shell contorna esse problema permitindo trocas de registros distantes um do outro;
->h significa quantos grupos serão divididos, exemplo: h=4, h=2, h=1;
->A razão da eficiência do algoritmo ainda não é conhecida

//===CÓDIGO===//

void shellsort() {
    int h = 1;
    do { h = (h * 3) + 1; } while (h < n);
    do {
        h /= 3;
        for(int cor = 0; cor < h; cor++){
            insercaoPorCor(cor, h);
        }
    } while (h != 1);
}
void insercaoPorCor(int cor, int h){
    for (int i = (h + cor); i < n; i+=h) {
        int tmp = array[i];
        int j = i - h;
        while ((j >= 0) && (array[j] > tmp)) {
            array[j + h] = array[j];
            j -= h;
        }
        array[j + h] = tmp;
    }
}

-------------------------------------------------------------------------------------------

QuickSort(não Estável)

-> Algoritmo de ordenação mais rápido para a maioria das situações;
-> Dividir para conquistar;
-> Divide o array em duas partes que serão independentemente ordenadas e a combinação de seus resultados produz a solução final
->Particionamento:
    •Escolha arbitrariamente um pivô
    •Percorra o array a partir da esquerda enquanto array[ i ] < pivô
    •Percorra o array a partir da direita enquanto array[ j ] > pivô
    •Se i ≤ j então troque array[ i ] com array[ j ]
    •Continue o processo enquanto i ≤ j

//===CÓDIGO===//

void quicksort(int esq, int dir) {
    int i = esq, j = dir, pivo = array[(esq+dir)/2];
    while (i <= j) {
        while (array[i] < pivo)
            i++;
        while (array[j] > pivo)
            j--;
        if (i <= j) {
            swap(i, j);
            i++;
            j--; 
        }
    }
    if (esq < j)
        quicksort(esq, j);
    if (i < dir)
        quicksort(i, dir);
}

ANÁLISE DE COMPLEXIDADE

->A análise de complexidade do Quicksort depende de equação de
recorrência (vista nas disciplinas Teoria dos Grafos e Computabilidade e
Projeto e Análise de Algoritmos)

comparações: Melhor = Θ[n * lg(n)]  /  Pior = Θ(n²)
movimentações: Melhor = Θ[n * lg(n)]   /  Pior = Θ(n²)

-------------------------------------------------------------------------------------------

HeapSort (Não Estável)

->Contém duas etapas, ambas  com custo Θ[n x lg(n)]. A primeira etapa é a criação do heap, a segunda é a destruição/ordenação do heap.
->O heap é um TAD que nos fornece ou o menor ou o maior elemnto de um conjunto, com custo Θ (1). O custo de construção é Θ[n x lg(n)].
Ao remover a cabeça do heap, conseguimos reorganizá-lo com custo Θ[lg(n)].
->O heap tradicional armazena o MENOR elemento em sua cabeça. Já o heap Invertido armazena o MAIOR elemento em sua cabeça e ele é utilizado no HeapSort


    //=====CÓDIGO====//

    public void sort() {
      //Alterar o vetor ignorando a posicao zero
      int[] tmp = new int[n+1];
      for(int i = 0; i < n; i++){
         tmp[i+1] = array[i];
      }
      array = tmp;

      //Contrucao do heap
      for(int tamHeap = 2; tamHeap <= n; tamHeap++){
         construir(tamHeap);
      }

      //Ordenacao propriamente dita
      int tamHeap = n;
      while(tamHeap > 1){
         swap(1, tamHeap--);
         reconstruir(tamHeap);
      }

      //Alterar o vetor para voltar a posicao zero
      tmp = array;
      array = new int[n];
      for(int i = 0; i < n; i++){
         array[i] = tmp[i+1];
      }
    }

    public void construir(int tamHeap){
      for(int i = tamHeap; i > 1 && array[i] > array[i/2]; i /= 2){
         swap(i, i/2);
      }
    }
    public void reconstruir(int tamHeap){
      int i = 1;
      while(i <= (tamHeap/2)){
         int filho = getMaiorFilho(i, tamHeap);
         if(array[i] < array[filho]){
            swap(i, filho);
            i = filho;
         }else{
            i = tamHeap;
         }
        }
    }

    public int getMaiorFilho(int i, int tamHeap){
      int filho;
      if (2*i == tamHeap || array[2*i] > array[2*i+1]){
         filho = 2*i;
      } else {
         filho = 2*i + 1;
      }
      return filho;
    }

Análise de COMPLEXIDADE
->Depende do tamanho da aŕvore (número de níveis)

comparações: Pior = Θ[lg(n)]
movimentações: Pior = Θ[lg(n)]

OBS.: 1 - O princípio de inserção do heap consiste em inserir uma nova folha no último nível (o mais a esquerda possível). Em seguida, comparamaos a nova folha com o pai.
Se a nova folha for maior que o pai. Invertemos seus valores. Continuaremos "subindo" o novo elemento enquanto ele for maior que o elemento pai; 
2 - Na verdade, o pior caso e o caso médio da primeira etapa do hepsort têm custo Θ[n x lg(n)]. A novidade, o melhor caso da primeira etapa do heapsort tem custo Θ[n] e acontece quando
cada elemento inserido no heap for menor ou igual ao seu pai;
3 - O único momento do heapsort que comparamos elementos irmãos acontece na remoção da cabeça do heap. Nesse caso, comparamos os irmãos para saber quem ficará no lugar do pai.